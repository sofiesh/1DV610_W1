"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asciiToTextFn = void 0;
function decimalASCIIToText(ascii) {
    const asciiArray = ascii
        .split(" ")
        .map((code) => parseInt(code.trim(), 10))
        .filter((item) => !isNaN(item));
    const sentence = asciiArray
        .map((asciiValue) => String.fromCharCode(asciiValue))
        .join("");
    return sentence;
}
function binaryASCIIToText(ascii) {
    // Split the input into an array of binary strings
    var binaryArray = ascii.split(" ");
    // Convert each binary string to decimal ASCII and then to a character
    var text = binaryArray
        .map(function (binary) {
        // Convert binary to decimal ASCII
        var decimalASCII = parseInt(binary, 2);
        // Convert decimal ASCII to character
        return String.fromCharCode(decimalASCII);
    })
        .join("");
    return text;
}
function octalASCIIToText(ascii) {
    // Split the input into an array of octal strings
    var octalArray = ascii.split(" ");
    // Convert each octal string to decimal ASCII and then to a character
    var text = octalArray
        .map(function (octal) {
        // Convert octal to decimal ASCII
        var decimalASCII = parseInt(octal, 8);
        // Convert decimal ASCII to character
        return String.fromCharCode(decimalASCII);
    })
        .join("");
    return text;
}
function hexASCIIToText(ascii) {
    // Split the input into an array of hexadecimal strings
    var hexArray = ascii.split(" ");
    // Convert each hexadecimal string to decimal ASCII and then to a character
    var text = hexArray
        .map(function (hex) {
        // Convert hexadecimal to decimal ASCII
        var decimalASCII = parseInt(hex, 16);
        // Convert decimal ASCII to character
        return String.fromCharCode(decimalASCII);
    })
        .join("");
    return text;
}
exports.asciiToTextFn = {
    decimal: decimalASCIIToText,
    binary: binaryASCIIToText,
    octal: octalASCIIToText,
    hex: hexASCIIToText,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNjaWlUb1RleHRIZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvYXNjaWlUb1RleHRIZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBUyxrQkFBa0IsQ0FBQyxLQUFhO0lBQ3ZDLE1BQU0sVUFBVSxHQUFHLEtBQUs7U0FDckIsS0FBSyxDQUFDLEdBQUcsQ0FBQztTQUNWLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN4QyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFbEMsTUFBTSxRQUFRLEdBQUcsVUFBVTtTQUN4QixHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRVosT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsS0FBYTtJQUN0QyxrREFBa0Q7SUFDbEQsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVuQyxzRUFBc0U7SUFDdEUsSUFBSSxJQUFJLEdBQUcsV0FBVztTQUNuQixHQUFHLENBQUMsVUFBVSxNQUFNO1FBQ25CLGtDQUFrQztRQUNsQyxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLHFDQUFxQztRQUNyQyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRVosT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFhO0lBQ3JDLGlEQUFpRDtJQUNqRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWxDLHFFQUFxRTtJQUNyRSxJQUFJLElBQUksR0FBRyxVQUFVO1NBQ2xCLEdBQUcsQ0FBQyxVQUFVLEtBQUs7UUFDbEIsaUNBQWlDO1FBQ2pDLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEMscUNBQXFDO1FBQ3JDLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFWixPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxLQUFhO0lBQ25DLHVEQUF1RDtJQUN2RCxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhDLDJFQUEyRTtJQUMzRSxJQUFJLElBQUksR0FBRyxRQUFRO1NBQ2hCLEdBQUcsQ0FBQyxVQUFVLEdBQUc7UUFDaEIsdUNBQXVDO1FBQ3ZDLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckMscUNBQXFDO1FBQ3JDLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFWixPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFWSxRQUFBLGFBQWEsR0FDeEI7SUFDRSxPQUFPLEVBQUUsa0JBQWtCO0lBQzNCLE1BQU0sRUFBRSxpQkFBaUI7SUFDekIsS0FBSyxFQUFFLGdCQUFnQjtJQUN2QixHQUFHLEVBQUUsY0FBYztDQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNjaWlUb1RleHRUeXBlIH0gZnJvbSBcIi4uL3R5cGVzL3R5cGVzXCI7XG5cbmZ1bmN0aW9uIGRlY2ltYWxBU0NJSVRvVGV4dChhc2NpaTogc3RyaW5nKSB7XG4gIGNvbnN0IGFzY2lpQXJyYXkgPSBhc2NpaVxuICAgIC5zcGxpdChcIiBcIilcbiAgICAubWFwKChjb2RlKSA9PiBwYXJzZUludChjb2RlLnRyaW0oKSwgMTApKVxuICAgIC5maWx0ZXIoKGl0ZW0pID0+ICFpc05hTihpdGVtKSk7XG5cbiAgY29uc3Qgc2VudGVuY2UgPSBhc2NpaUFycmF5XG4gICAgLm1hcCgoYXNjaWlWYWx1ZSkgPT4gU3RyaW5nLmZyb21DaGFyQ29kZShhc2NpaVZhbHVlKSlcbiAgICAuam9pbihcIlwiKTtcblxuICByZXR1cm4gc2VudGVuY2U7XG59XG5cbmZ1bmN0aW9uIGJpbmFyeUFTQ0lJVG9UZXh0KGFzY2lpOiBzdHJpbmcpIHtcbiAgLy8gU3BsaXQgdGhlIGlucHV0IGludG8gYW4gYXJyYXkgb2YgYmluYXJ5IHN0cmluZ3NcbiAgdmFyIGJpbmFyeUFycmF5ID0gYXNjaWkuc3BsaXQoXCIgXCIpO1xuXG4gIC8vIENvbnZlcnQgZWFjaCBiaW5hcnkgc3RyaW5nIHRvIGRlY2ltYWwgQVNDSUkgYW5kIHRoZW4gdG8gYSBjaGFyYWN0ZXJcbiAgdmFyIHRleHQgPSBiaW5hcnlBcnJheVxuICAgIC5tYXAoZnVuY3Rpb24gKGJpbmFyeSkge1xuICAgICAgLy8gQ29udmVydCBiaW5hcnkgdG8gZGVjaW1hbCBBU0NJSVxuICAgICAgdmFyIGRlY2ltYWxBU0NJSSA9IHBhcnNlSW50KGJpbmFyeSwgMik7XG4gICAgICAvLyBDb252ZXJ0IGRlY2ltYWwgQVNDSUkgdG8gY2hhcmFjdGVyXG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShkZWNpbWFsQVNDSUkpO1xuICAgIH0pXG4gICAgLmpvaW4oXCJcIik7XG5cbiAgcmV0dXJuIHRleHQ7XG59XG5cbmZ1bmN0aW9uIG9jdGFsQVNDSUlUb1RleHQoYXNjaWk6IHN0cmluZykge1xuICAvLyBTcGxpdCB0aGUgaW5wdXQgaW50byBhbiBhcnJheSBvZiBvY3RhbCBzdHJpbmdzXG4gIHZhciBvY3RhbEFycmF5ID0gYXNjaWkuc3BsaXQoXCIgXCIpO1xuXG4gIC8vIENvbnZlcnQgZWFjaCBvY3RhbCBzdHJpbmcgdG8gZGVjaW1hbCBBU0NJSSBhbmQgdGhlbiB0byBhIGNoYXJhY3RlclxuICB2YXIgdGV4dCA9IG9jdGFsQXJyYXlcbiAgICAubWFwKGZ1bmN0aW9uIChvY3RhbCkge1xuICAgICAgLy8gQ29udmVydCBvY3RhbCB0byBkZWNpbWFsIEFTQ0lJXG4gICAgICB2YXIgZGVjaW1hbEFTQ0lJID0gcGFyc2VJbnQob2N0YWwsIDgpO1xuICAgICAgLy8gQ29udmVydCBkZWNpbWFsIEFTQ0lJIHRvIGNoYXJhY3RlclxuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZGVjaW1hbEFTQ0lJKTtcbiAgICB9KVxuICAgIC5qb2luKFwiXCIpO1xuXG4gIHJldHVybiB0ZXh0O1xufVxuXG5mdW5jdGlvbiBoZXhBU0NJSVRvVGV4dChhc2NpaTogc3RyaW5nKSB7XG4gIC8vIFNwbGl0IHRoZSBpbnB1dCBpbnRvIGFuIGFycmF5IG9mIGhleGFkZWNpbWFsIHN0cmluZ3NcbiAgdmFyIGhleEFycmF5ID0gYXNjaWkuc3BsaXQoXCIgXCIpO1xuXG4gIC8vIENvbnZlcnQgZWFjaCBoZXhhZGVjaW1hbCBzdHJpbmcgdG8gZGVjaW1hbCBBU0NJSSBhbmQgdGhlbiB0byBhIGNoYXJhY3RlclxuICB2YXIgdGV4dCA9IGhleEFycmF5XG4gICAgLm1hcChmdW5jdGlvbiAoaGV4KSB7XG4gICAgICAvLyBDb252ZXJ0IGhleGFkZWNpbWFsIHRvIGRlY2ltYWwgQVNDSUlcbiAgICAgIHZhciBkZWNpbWFsQVNDSUkgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICAgIC8vIENvbnZlcnQgZGVjaW1hbCBBU0NJSSB0byBjaGFyYWN0ZXJcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGRlY2ltYWxBU0NJSSk7XG4gICAgfSlcbiAgICAuam9pbihcIlwiKTtcblxuICByZXR1cm4gdGV4dDtcbn1cblxuZXhwb3J0IGNvbnN0IGFzY2lpVG9UZXh0Rm46IFJlY29yZDxBc2NpaVRvVGV4dFR5cGUsIChhc2NpaTogc3RyaW5nKSA9PiBzdHJpbmc+ID1cbiAge1xuICAgIGRlY2ltYWw6IGRlY2ltYWxBU0NJSVRvVGV4dCxcbiAgICBiaW5hcnk6IGJpbmFyeUFTQ0lJVG9UZXh0LFxuICAgIG9jdGFsOiBvY3RhbEFTQ0lJVG9UZXh0LFxuICAgIGhleDogaGV4QVNDSUlUb1RleHQsXG4gIH07XG4iXX0=